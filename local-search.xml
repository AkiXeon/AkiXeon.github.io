<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/12/19/leetcode2/"/>
    <url>/2024/12/19/leetcode2/</url>
    
    <content type="html"><![CDATA[<h1 id="力扣第二题，两数相加"><a href="#力扣第二题，两数相加" class="headerlink" title="力扣第二题，两数相加"></a>力扣第二题，两数相加</h1><p>最近在尝试做一下leetcode，零基础起步</p><h3 id="审题"><a href="#审题" class="headerlink" title="审题"></a>审题</h3><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p><img src="/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.jpg" alt="D:\C_Code"></p><h5 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h5><blockquote><p>输入：l1 &#x3D; [2,4,3], l2 &#x3D; [5,6,4]<br>输出：[7,0,8]<br>解释：342 + 465 &#x3D; 807.</p></blockquote><h5 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h5><blockquote><p>输入：l1 &#x3D; [0], l2 &#x3D; [0]<br>输出：[0]</p></blockquote><h5 id="示例3："><a href="#示例3：" class="headerlink" title="示例3："></a>示例3：</h5><blockquote><p>输入：l1 &#x3D; [9,9,9,9,9,9,9], l2 &#x3D; [9,9,9,9]<br>输出：[8,9,9,9,0,0,0,1]</p></blockquote><h5 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h5><ul><li>每个链表中的节点数在范围 [1, 100] 内</li><li>0 &lt;&#x3D; Node.val &lt;&#x3D; 9</li><li>题目数据保证列表表示的数字不含前导零</li></ul><h5 id="原始题目："><a href="#原始题目：" class="headerlink" title="原始题目："></a>原始题目：</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     struct ListNode *next;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br> <span class="hljs-keyword">struct</span> ListNode* <span class="hljs-title function_">addTwoNumbers</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ListNode* l1, <span class="hljs-keyword">struct</span> ListNode* l2)</span> &#123;<br><br> &#125;<br></code></pre></td></tr></table></figure><h6 id="这里说一下，leetcode中的题目是没有main函数的，完成给出函数的补全即可。"><a href="#这里说一下，leetcode中的题目是没有main函数的，完成给出函数的补全即可。" class="headerlink" title="这里说一下，leetcode中的题目是没有main函数的，完成给出函数的补全即可。"></a>这里说一下，leetcode中的题目是没有main函数的，完成给出函数的补全即可。</h6><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>给了两个链表，本质上是加减，正序反序其实无所谓，那么如何加？</p><ul><li>直接一一对应加，需要考虑进位</li><li>先把题目给出两个链表的数值算出来，然后分别取个十百位再创建链表</li></ul><p>第二种比较麻烦，有很多取余取整，故这里采用第一种方法。</p><p>一上来先申请一块内存空间来做指针，一会return出去，然后标准初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">p</span> =</span> (<span class="hljs-keyword">struct</span> ListNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> ListNode));<br>p-&gt;next = <span class="hljs-literal">NULL</span>; <br></code></pre></td></tr></table></figure><p>紧接着申请另外一个指针，来辅助操作（可以直接对辅助指针进行迭代操作，返回的时候只返回原始指针的next指针）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">t</span> =</span> (<span class="hljs-keyword">struct</span> ListNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> ListNode));<br>t-&gt;next = <span class="hljs-literal">NULL</span>;<br>t = p;<br></code></pre></td></tr></table></figure><p>然后就是相加的部分了，首先是l1，l2不能为空，然后定义一个临时指针通过后插扩充链表，计算的过程涉及到了进位，所以用flag来表示是否产生进位，在没有产生进位的情况下，链表对应位置的值就是l1，l2相应位置的值之和，直接相加即可，如果产生了进位，就在l1，l2基础上加1。</p><p>是否产生进位，就看l1，l2 (+1)对应的值是否大于9，如果大于，取余赋值，并将flag设置为1，否则直接赋值，flag设置为0；</p><p>剩下就是常规的后插法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(l1&amp;&amp;l2)&#123;<br>    <span class="hljs-type">int</span> temp = <span class="hljs-number">0</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">s</span> =</span> (<span class="hljs-keyword">struct</span> ListNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> ListNode));<br>    s-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span>(flag)&#123;<br>         temp = l1-&gt;val + l2-&gt;val + <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span>  temp = l1-&gt;val + l2-&gt;val;<br>    flag = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(temp &gt; <span class="hljs-number">9</span>)&#123;<br>        s-&gt;val = temp%<span class="hljs-number">10</span>;<br>        flag = <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span> s-&gt;val = temp;<br>    t-&gt;next = s;<br>    t = t-&gt;next;<br>    l1 = l1-&gt;next;<br>    l2 = l2-&gt;next;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是测试时发现有一种情况没有考虑，即两链表长度未必相同：</p><h6 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h6><blockquote><p>l1 &#x3D; [9,9,9,9,9,9,9]<br>l2 &#x3D; [9,9,9,9]</p></blockquote><h6 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h6><blockquote><p>[8,9,9,9]</p></blockquote><h6 id="预期结果"><a href="#预期结果" class="headerlink" title="预期结果"></a>预期结果</h6><blockquote><p>[8,9,9,9,0,0,0,1]</p></blockquote><p>这明显是在l1或l2任一为空时停止了循环，为此我们需要继续把剩余的补充上去。<br>可以使用<code>while(l1)</code>和<code>while(l2)</code>来把未空的链表继续完成</p><p>我们仍然需要考虑进位，从简单的考虑，如果没有进位那么直接把剩余的节点直接尾插即可。</p><p>如果进位了，那么就需要把节点的<code>val</code>加1，后续仍然需要考虑进位问题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span>(l1)&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">s</span> =</span> (<span class="hljs-keyword">struct</span> ListNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> ListNode));<br>    s-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span>(flag)&#123;<br>        <span class="hljs-keyword">if</span>(l1-&gt;val+<span class="hljs-number">1</span> &gt; <span class="hljs-number">9</span>)&#123;<br>            s-&gt;val = (l1-&gt;val + <span class="hljs-number">1</span>)%<span class="hljs-number">10</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            s-&gt;val = l1-&gt;val + <span class="hljs-number">1</span>;<br>            flag = <span class="hljs-number">0</span>;   <br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        s-&gt;val = l1-&gt;val;<br>    &#125;<br>    t-&gt;next = s;<br>    t = t-&gt;next;<br>    l1 = l1-&gt;next;<br>&#125;<br></code></pre></td></tr></table></figure><p>l2同理，将l1改为l2即可。</p><p>运行代码，结果是</p><blockquote><p>[8,9,9,9,0,0,0]</p></blockquote><p>发现缺少了一位，显然，缺少的是进位，为此我们添加上</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span>(flag)&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">s</span> =</span> (<span class="hljs-keyword">struct</span> ListNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> ListNode));<br>    s-&gt;next = <span class="hljs-literal">NULL</span>;<br>    s-&gt;val = <span class="hljs-number">1</span> <span class="hljs-comment">//进位，确定是1了</span><br>    t-&gt;next = s;<br>    t = t-&gt;next;<br>&#125;<br></code></pre></td></tr></table></figure><p>在最后，返回p指针的next指针（尾插法从next开始是第一个节点）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">return</span> p-&gt;next; <br></code></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>[8,9,9,9,0,0,0,1]</p></blockquote><p>至此结束<br><img src="/lc2.png" alt="D:\C_Code"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-keyword">struct</span> ListNode* <span class="hljs-title function_">addTwoNumbers</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ListNode* l1, <span class="hljs-keyword">struct</span> ListNode* l2)</span> &#123;<br>    <br>    <span class="hljs-type">int</span> num1,num2,num3;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">p</span> =</span> (<span class="hljs-keyword">struct</span> ListNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> ListNode));<br>    p-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">t</span> =</span> (<span class="hljs-keyword">struct</span> ListNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> ListNode));<br>    t-&gt;next = <span class="hljs-literal">NULL</span>;<br>    t = p;<br>    <span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(l1&amp;&amp;l2)&#123;<br>        <span class="hljs-type">int</span> temp = <span class="hljs-number">0</span>;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">s</span> =</span> (<span class="hljs-keyword">struct</span> ListNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> ListNode));<br>        s-&gt;next = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">if</span>(flag)&#123;<br>             temp = l1-&gt;val + l2-&gt;val + <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span>  temp = l1-&gt;val + l2-&gt;val;<br>        flag = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(temp &gt; <span class="hljs-number">9</span>)&#123;<br>            s-&gt;val = temp%<span class="hljs-number">10</span>;<br>            flag = <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span> s-&gt;val = temp;<br>        t-&gt;next = s;<br>        t = t-&gt;next;<br>        l1 = l1-&gt;next;<br>        l2 = l2-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(l1)&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">s</span> =</span> (<span class="hljs-keyword">struct</span> ListNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> ListNode));<br>        s-&gt;next = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">if</span>(flag)&#123;<br>            <span class="hljs-keyword">if</span>(l1-&gt;val+<span class="hljs-number">1</span> &gt; <span class="hljs-number">9</span>)&#123;<br>                s-&gt;val = (l1-&gt;val + <span class="hljs-number">1</span>)%<span class="hljs-number">10</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                s-&gt;val = l1-&gt;val + <span class="hljs-number">1</span>;<br>                flag = <span class="hljs-number">0</span>;   <br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            s-&gt;val = l1-&gt;val;<br>        &#125;<br>        t-&gt;next = s;<br>        t = t-&gt;next;<br>        l1 = l1-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(l2)&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">s</span> =</span> (<span class="hljs-keyword">struct</span> ListNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> ListNode));<br>        s-&gt;next = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">if</span>(flag)&#123;<br>            <span class="hljs-keyword">if</span>(l2-&gt;val+<span class="hljs-number">1</span> &gt; <span class="hljs-number">9</span>)&#123;<br>                s-&gt;val = (l2-&gt;val + <span class="hljs-number">1</span>)%<span class="hljs-number">10</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                s-&gt;val = l2-&gt;val + <span class="hljs-number">1</span>;<br>                flag = <span class="hljs-number">0</span>;   <br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            s-&gt;val = l2-&gt;val;<br>        &#125;<br>        t-&gt;next = s;<br>        t = t-&gt;next;<br>        l2 = l2-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(flag)&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">s</span> =</span> (<span class="hljs-keyword">struct</span> ListNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> ListNode));<br>        s-&gt;next = <span class="hljs-literal">NULL</span>;<br>        s-&gt;val = <span class="hljs-number">1</span>;<br>        t-&gt;next = s;<br>        t=t-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p-&gt;next;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>故事的起点</title>
    <link href="/2024/12/16/firstarticle/"/>
    <url>/2024/12/16/firstarticle/</url>
    
    <content type="html"><![CDATA[<h1 id="Hello"><a href="#Hello" class="headerlink" title="Hello!"></a>Hello!</h1><p>今天是2024&#x2F;12&#x2F;16 😌 部署了一个博客，其实准确来说是昨天部署好今天优化了下。</p><p>为什么要做呢？</p><p>：一是最近有些无所事事，二是最近有些封闭，需要一些对外的输出（哪怕没人看:D），三是有些想要记录生活，不然总感觉一年一如的生活仿佛水中的浪花逸散而去。<br>所以就做了，有一些小目标啊，比如每周至少要有周报，然后月报，年报，兴许能起点督促作用。</p><h2 id="Hexo-Fluid"><a href="#Hexo-Fluid" class="headerlink" title="Hexo&amp;Fluid"></a>Hexo&amp;Fluid</h2><p>这个博客的建立没有自己写代码（ <del>html javascript css</del>  ）,使用了Hexo框架搭配Fluid主题进行了简单部署，基本上只需要修改配置即可。</p><p>教程参考：<a href="https://www.bilibili.com/video/BV1Ju4m1c7WR">https://www.bilibili.com/video/BV1Ju4m1c7WR</a> 选择挂载在github上，因此没有使用独立的服务器。</p><p>写文章用的是markdown,感觉不太需要学，随用随查也够用：<a href="https://markdown.com.cn/">https://markdown.com.cn/</a></p><p>这个是Fluid的配置教程：<a href="https://fluid-dev.github.io/hexo-fluid-docs/start/">https://fluid-dev.github.io/hexo-fluid-docs/start/</a></p><p>每日文章调用的是一言的api，我选了诗词，文学，哲学，这是api调用地址：<a href="https://developer.hitokoto.cn/">https://developer.hitokoto.cn/</a></p><h2 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h2><p>第一次不需要太多内容，就这样结束吧！祝你安好！😁👍</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/12/15/hello-world/"/>
    <url>/2024/12/15/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
